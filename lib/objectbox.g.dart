// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/product.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 7051428861046331492),
      name: 'Product',
      lastPropertyId: const IdUid(51, 258697112939112963),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8268138621124550336),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 4705314661491628038),
            name: 'model',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4386833231194087724),
            name: 'company',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1767619809769961956),
            name: 'imgSrc',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7801584875551790829),
            name: 'img',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7959460863119819489),
            name: 'network',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 536059898604875933),
            name: 'announced',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 413523306668445300),
            name: 'status',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 911624665081641735),
            name: 'dimensions',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 7598663282694266674),
            name: 'weight',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2315258533910815457),
            name: 'bodyMaterials',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 3919325547799505555),
            name: 'sim',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 8046320668894368306),
            name: 'bodyOthers',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 2390977164457180776),
            name: 'displayType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 4219146073723071636),
            name: 'displaySize',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 3356538396086300587),
            name: 'displayResolution',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 3259072180907987416),
            name: 'displayProtection',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 8466985048272950085),
            name: 'displayOthers',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 8460881377327014370),
            name: 'os',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 8803553670759758676),
            name: 'chipset',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 2429136003950118662),
            name: 'cpu',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 5757850289353501746),
            name: 'gpu',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 401143795300113324),
            name: 'cardSlot',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 8650519676532184581),
            name: 'memory',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(25, 8170372854815025672),
            name: 'memoryOther',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(26, 1119957175335274816),
            name: 'rearCameraModules',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(27, 542935731553433640),
            name: 'rearCameraFeatures',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(28, 7072227083063156230),
            name: 'rearCameraVideo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(29, 644357362483130552),
            name: 'frontCameraModules',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(30, 5260414538094312339),
            name: 'frontCameraFeatures',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(31, 5072637992468791643),
            name: 'frontCameraVideo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(32, 1998180770785170123),
            name: 'loudSpeaker',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(33, 248012450754979400),
            name: 'earjack',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(34, 6788475668030095305),
            name: 'soundOthers',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(35, 216957565027935044),
            name: 'wlan',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(36, 5283452695629042634),
            name: 'bluetooth',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(37, 5519777007145339402),
            name: 'gps',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(38, 7419309225297935338),
            name: 'nfc',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(39, 1123273121539219905),
            name: 'infrared',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(40, 3760454576644496050),
            name: 'radio',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(41, 6469998644404680092),
            name: 'usb',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(42, 672589485201233414),
            name: 'sensors',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(43, 6079943774077675623),
            name: 'featureOthers',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(44, 8457347430694649499),
            name: 'battery',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(45, 982895410872595586),
            name: 'charging',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(46, 1120572596476686691),
            name: 'colors',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(47, 5202523827193183076),
            name: 'modelName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(48, 8232083360672970319),
            name: 'priceUS',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(49, 8204333870482597402),
            name: 'priceEU',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(50, 2735103394356674283),
            name: 'priceEN',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(51, 258697112939112963),
            name: 'priceIN',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 7051428861046331492),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Product: EntityDefinition<Product>(
        model: _entities[0],
        toOneRelations: (Product object) => [],
        toManyRelations: (Product object) => {},
        getId: (Product object) => object.id,
        setId: (Product object, int id) {
          object.id = id;
        },
        objectToFB: (Product object, fb.Builder fbb) {
          final modelOffset = fbb.writeString(object.model);
          final companyOffset = fbb.writeString(object.company);
          final imgSrcOffset = fbb.writeString(object.imgSrc);
          final imgOffset = fbb.writeString(object.img);
          final networkOffset = fbb.writeString(object.network);
          final announcedOffset = fbb.writeString(object.announced);
          final statusOffset = fbb.writeString(object.status);
          final dimensionsOffset = fbb.writeString(object.dimensions);
          final weightOffset = fbb.writeString(object.weight);
          final bodyMaterialsOffset = fbb.writeString(object.bodyMaterials);
          final simOffset = fbb.writeString(object.sim);
          final bodyOthersOffset = fbb.writeString(object.bodyOthers);
          final displayTypeOffset = fbb.writeString(object.displayType);
          final displaySizeOffset = fbb.writeString(object.displaySize);
          final displayResolutionOffset =
              fbb.writeString(object.displayResolution);
          final displayProtectionOffset =
              fbb.writeString(object.displayProtection);
          final displayOthersOffset = fbb.writeString(object.displayOthers);
          final osOffset = fbb.writeString(object.os);
          final chipsetOffset = fbb.writeString(object.chipset);
          final cpuOffset = fbb.writeString(object.cpu);
          final gpuOffset = fbb.writeString(object.gpu);
          final cardSlotOffset = fbb.writeString(object.cardSlot);
          final memoryOffset = fbb.writeString(object.memory);
          final memoryOtherOffset = fbb.writeString(object.memoryOther);
          final rearCameraModulesOffset = fbb.writeList(object.rearCameraModules
              .map(fbb.writeString)
              .toList(growable: false));
          final rearCameraFeaturesOffset =
              fbb.writeString(object.rearCameraFeatures);
          final rearCameraVideoOffset = fbb.writeString(object.rearCameraVideo);
          final frontCameraModulesOffset = fbb.writeList(object
              .frontCameraModules
              .map(fbb.writeString)
              .toList(growable: false));
          final frontCameraFeaturesOffset =
              fbb.writeString(object.frontCameraFeatures);
          final frontCameraVideoOffset =
              fbb.writeString(object.frontCameraVideo);
          final loudSpeakerOffset = fbb.writeString(object.loudSpeaker);
          final earjackOffset = fbb.writeString(object.earjack);
          final soundOthersOffset = fbb.writeString(object.soundOthers);
          final wlanOffset = fbb.writeString(object.wlan);
          final bluetoothOffset = fbb.writeString(object.bluetooth);
          final gpsOffset = fbb.writeString(object.gps);
          final nfcOffset = fbb.writeString(object.nfc);
          final infraredOffset = fbb.writeString(object.infrared);
          final radioOffset = fbb.writeString(object.radio);
          final usbOffset = fbb.writeString(object.usb);
          final sensorsOffset = fbb.writeString(object.sensors);
          final featureOthersOffset = fbb.writeString(object.featureOthers);
          final batteryOffset = fbb.writeString(object.battery);
          final chargingOffset = fbb.writeString(object.charging);
          final colorsOffset = fbb.writeString(object.colors);
          final modelNameOffset = fbb.writeString(object.modelName);
          fbb.startTable(52);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, modelOffset);
          fbb.addOffset(2, companyOffset);
          fbb.addOffset(3, imgSrcOffset);
          fbb.addOffset(4, imgOffset);
          fbb.addOffset(5, networkOffset);
          fbb.addOffset(6, announcedOffset);
          fbb.addOffset(7, statusOffset);
          fbb.addOffset(8, dimensionsOffset);
          fbb.addOffset(9, weightOffset);
          fbb.addOffset(10, bodyMaterialsOffset);
          fbb.addOffset(11, simOffset);
          fbb.addOffset(12, bodyOthersOffset);
          fbb.addOffset(13, displayTypeOffset);
          fbb.addOffset(14, displaySizeOffset);
          fbb.addOffset(15, displayResolutionOffset);
          fbb.addOffset(16, displayProtectionOffset);
          fbb.addOffset(17, displayOthersOffset);
          fbb.addOffset(18, osOffset);
          fbb.addOffset(19, chipsetOffset);
          fbb.addOffset(20, cpuOffset);
          fbb.addOffset(21, gpuOffset);
          fbb.addOffset(22, cardSlotOffset);
          fbb.addOffset(23, memoryOffset);
          fbb.addOffset(24, memoryOtherOffset);
          fbb.addOffset(25, rearCameraModulesOffset);
          fbb.addOffset(26, rearCameraFeaturesOffset);
          fbb.addOffset(27, rearCameraVideoOffset);
          fbb.addOffset(28, frontCameraModulesOffset);
          fbb.addOffset(29, frontCameraFeaturesOffset);
          fbb.addOffset(30, frontCameraVideoOffset);
          fbb.addOffset(31, loudSpeakerOffset);
          fbb.addOffset(32, earjackOffset);
          fbb.addOffset(33, soundOthersOffset);
          fbb.addOffset(34, wlanOffset);
          fbb.addOffset(35, bluetoothOffset);
          fbb.addOffset(36, gpsOffset);
          fbb.addOffset(37, nfcOffset);
          fbb.addOffset(38, infraredOffset);
          fbb.addOffset(39, radioOffset);
          fbb.addOffset(40, usbOffset);
          fbb.addOffset(41, sensorsOffset);
          fbb.addOffset(42, featureOthersOffset);
          fbb.addOffset(43, batteryOffset);
          fbb.addOffset(44, chargingOffset);
          fbb.addOffset(45, colorsOffset);
          fbb.addOffset(46, modelNameOffset);
          fbb.addFloat64(47, object.priceUS);
          fbb.addFloat64(48, object.priceEU);
          fbb.addFloat64(49, object.priceEN);
          fbb.addFloat64(50, object.priceIN);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Product()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..model = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..company = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..imgSrc = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '')
            ..img = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '')
            ..network = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 14, '')
            ..announced = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 16, '')
            ..status = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 18, '')
            ..dimensions = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 20, '')
            ..weight = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 22, '')
            ..bodyMaterials = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 24, '')
            ..sim = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 26, '')
            ..bodyOthers = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 28, '')
            ..displayType = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 30, '')
            ..displaySize = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 32, '')
            ..displayResolution = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 34, '')
            ..displayProtection = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 36, '')
            ..displayOthers = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 38, '')
            ..os = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 40, '')
            ..chipset = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 42, '')
            ..cpu = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 44, '')
            ..gpu = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 46, '')
            ..cardSlot = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 48, '')
            ..memory = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 50, '')
            ..memoryOther = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 52, '')
            ..rearCameraModules = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGet(buffer, rootOffset, 54, [])
            ..rearCameraFeatures =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 56, '')
            ..rearCameraVideo = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 58, '')
            ..frontCameraModules = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGet(buffer, rootOffset, 60, [])
            ..frontCameraFeatures =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 62, '')
            ..frontCameraVideo = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 64, '')
            ..loudSpeaker = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 66, '')
            ..earjack = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 68, '')
            ..soundOthers = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 70, '')
            ..wlan = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 72, '')
            ..bluetooth = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 74, '')
            ..gps = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 76, '')
            ..nfc = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 78, '')
            ..infrared = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 80, '')
            ..radio = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 82, '')
            ..usb = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 84, '')
            ..sensors = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 86, '')
            ..featureOthers = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 88, '')
            ..battery = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 90, '')
            ..charging = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 92, '')
            ..colors = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 94, '')
            ..modelName = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 96, '')
            ..priceUS =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 98, 0)
            ..priceEU =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 100, 0)
            ..priceEN =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 102, 0)
            ..priceIN =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 104, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Product] entity fields to define ObjectBox queries.
class Product_ {
  /// see [Product.id]
  static final id = QueryIntegerProperty<Product>(_entities[0].properties[0]);

  /// see [Product.model]
  static final model = QueryStringProperty<Product>(_entities[0].properties[1]);

  /// see [Product.company]
  static final company =
      QueryStringProperty<Product>(_entities[0].properties[2]);

  /// see [Product.imgSrc]
  static final imgSrc =
      QueryStringProperty<Product>(_entities[0].properties[3]);

  /// see [Product.img]
  static final img = QueryStringProperty<Product>(_entities[0].properties[4]);

  /// see [Product.network]
  static final network =
      QueryStringProperty<Product>(_entities[0].properties[5]);

  /// see [Product.announced]
  static final announced =
      QueryStringProperty<Product>(_entities[0].properties[6]);

  /// see [Product.status]
  static final status =
      QueryStringProperty<Product>(_entities[0].properties[7]);

  /// see [Product.dimensions]
  static final dimensions =
      QueryStringProperty<Product>(_entities[0].properties[8]);

  /// see [Product.weight]
  static final weight =
      QueryStringProperty<Product>(_entities[0].properties[9]);

  /// see [Product.bodyMaterials]
  static final bodyMaterials =
      QueryStringProperty<Product>(_entities[0].properties[10]);

  /// see [Product.sim]
  static final sim = QueryStringProperty<Product>(_entities[0].properties[11]);

  /// see [Product.bodyOthers]
  static final bodyOthers =
      QueryStringProperty<Product>(_entities[0].properties[12]);

  /// see [Product.displayType]
  static final displayType =
      QueryStringProperty<Product>(_entities[0].properties[13]);

  /// see [Product.displaySize]
  static final displaySize =
      QueryStringProperty<Product>(_entities[0].properties[14]);

  /// see [Product.displayResolution]
  static final displayResolution =
      QueryStringProperty<Product>(_entities[0].properties[15]);

  /// see [Product.displayProtection]
  static final displayProtection =
      QueryStringProperty<Product>(_entities[0].properties[16]);

  /// see [Product.displayOthers]
  static final displayOthers =
      QueryStringProperty<Product>(_entities[0].properties[17]);

  /// see [Product.os]
  static final os = QueryStringProperty<Product>(_entities[0].properties[18]);

  /// see [Product.chipset]
  static final chipset =
      QueryStringProperty<Product>(_entities[0].properties[19]);

  /// see [Product.cpu]
  static final cpu = QueryStringProperty<Product>(_entities[0].properties[20]);

  /// see [Product.gpu]
  static final gpu = QueryStringProperty<Product>(_entities[0].properties[21]);

  /// see [Product.cardSlot]
  static final cardSlot =
      QueryStringProperty<Product>(_entities[0].properties[22]);

  /// see [Product.memory]
  static final memory =
      QueryStringProperty<Product>(_entities[0].properties[23]);

  /// see [Product.memoryOther]
  static final memoryOther =
      QueryStringProperty<Product>(_entities[0].properties[24]);

  /// see [Product.rearCameraModules]
  static final rearCameraModules =
      QueryStringVectorProperty<Product>(_entities[0].properties[25]);

  /// see [Product.rearCameraFeatures]
  static final rearCameraFeatures =
      QueryStringProperty<Product>(_entities[0].properties[26]);

  /// see [Product.rearCameraVideo]
  static final rearCameraVideo =
      QueryStringProperty<Product>(_entities[0].properties[27]);

  /// see [Product.frontCameraModules]
  static final frontCameraModules =
      QueryStringVectorProperty<Product>(_entities[0].properties[28]);

  /// see [Product.frontCameraFeatures]
  static final frontCameraFeatures =
      QueryStringProperty<Product>(_entities[0].properties[29]);

  /// see [Product.frontCameraVideo]
  static final frontCameraVideo =
      QueryStringProperty<Product>(_entities[0].properties[30]);

  /// see [Product.loudSpeaker]
  static final loudSpeaker =
      QueryStringProperty<Product>(_entities[0].properties[31]);

  /// see [Product.earjack]
  static final earjack =
      QueryStringProperty<Product>(_entities[0].properties[32]);

  /// see [Product.soundOthers]
  static final soundOthers =
      QueryStringProperty<Product>(_entities[0].properties[33]);

  /// see [Product.wlan]
  static final wlan = QueryStringProperty<Product>(_entities[0].properties[34]);

  /// see [Product.bluetooth]
  static final bluetooth =
      QueryStringProperty<Product>(_entities[0].properties[35]);

  /// see [Product.gps]
  static final gps = QueryStringProperty<Product>(_entities[0].properties[36]);

  /// see [Product.nfc]
  static final nfc = QueryStringProperty<Product>(_entities[0].properties[37]);

  /// see [Product.infrared]
  static final infrared =
      QueryStringProperty<Product>(_entities[0].properties[38]);

  /// see [Product.radio]
  static final radio =
      QueryStringProperty<Product>(_entities[0].properties[39]);

  /// see [Product.usb]
  static final usb = QueryStringProperty<Product>(_entities[0].properties[40]);

  /// see [Product.sensors]
  static final sensors =
      QueryStringProperty<Product>(_entities[0].properties[41]);

  /// see [Product.featureOthers]
  static final featureOthers =
      QueryStringProperty<Product>(_entities[0].properties[42]);

  /// see [Product.battery]
  static final battery =
      QueryStringProperty<Product>(_entities[0].properties[43]);

  /// see [Product.charging]
  static final charging =
      QueryStringProperty<Product>(_entities[0].properties[44]);

  /// see [Product.colors]
  static final colors =
      QueryStringProperty<Product>(_entities[0].properties[45]);

  /// see [Product.modelName]
  static final modelName =
      QueryStringProperty<Product>(_entities[0].properties[46]);

  /// see [Product.priceUS]
  static final priceUS =
      QueryDoubleProperty<Product>(_entities[0].properties[47]);

  /// see [Product.priceEU]
  static final priceEU =
      QueryDoubleProperty<Product>(_entities[0].properties[48]);

  /// see [Product.priceEN]
  static final priceEN =
      QueryDoubleProperty<Product>(_entities[0].properties[49]);

  /// see [Product.priceIN]
  static final priceIN =
      QueryDoubleProperty<Product>(_entities[0].properties[50]);
}
